
chmod +x #赋权限
chmod 755 /usr/local/mysql -R 整个文件夹赋权限

--------------------------mongodb安装使用--------------------------------

mongodb-linux-x86_64-2.2.0.tgz

1.>tar -zxvf 解压到 /usr/mongodb  
2.>mkdir -p data/db  #创建数据存放目录
3.>echo /tmp/mongodb/bin/mongod --dbpath=/tmp/mongodb/data/db --logpath=/tmp/mongodb/logs/mongodb.log --lpend --autogappend --auth --port=27017 >>/etc/rc.local 
4.>mongodb/bin/mongod --dbpath=/tmp/mongodb/data/db  #启动服务
5.>mongodb/bin/mongo #启动客户端
6.>use admin 
7.>db.addUser("congou","congou") #创建一个用户
8.>db.auth('congou','congou') #用户认证
9.>use eimplog 
   db.logs.save({'msgid':'1','dataid':'data2012','msg':'m','msgtype':'error','logtime':'2012-10-1'}) #添加一条记录
   
#删除mongodb
rm -rfd mongodb(文件名)   
   




--------------------------activemq安装使用-----------------------------------

1.解压apache-activemq-5.6.0 到 /usr/apache-activemq-5.6.0
2.在目录/config 创建 users.propertiesτ
		#users.properties
		system=manager
		user=123
		guest=123
		test1=123

3.在目录/config 创建groups.propertiesτ
		#groups.properties
		admins=system
		users=system,user,test1
		guests=guest		
		
4.在目录/config 创建login.config
		activemq-domain {
    org.apache.activemq.jaas.PropertiesLoginModule required
        debug=true
        org.apache.activemq.jaas.properties.user="users.properties"
        org.apache.activemq.jaas.properties.group="groups.properties";
		};		

5.在目录/config 下 修改activemq.xml
	<?xml version="1.0" encoding="UTF-8"?> 
	<beans
	  xmlns="http://www.springframework.org/schema/beans"
	  xmlns:amq="http://activemq.apache.org/schema/core"
	  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
	  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">

    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" />
    
		 <!-- <bean id="mysql-ds" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">  
		    <property name="driverClassName" value="com.mysql.jdbc.Driver"/>  
		    <property name="url" value="jdbc:mysql://127.0.0.1:3306/mqdata"/>  
		    <property name="username" value="root"/>  
		    <property name="password" value="123"/>  
		    <property name="maxActive" value="200"/>  
		    <property name="poolPreparedStatements" value="true"/>  
		  </bean>
		  -->
	   
	    <broker brokerName="pure_master" useJmx="false" persistent="false" xmlns="http://activemq.apache.org/schema/core" populateJMSXUserID="true">
	
	              
	        <destinationPolicy>
	            <policyMap>
	              <policyEntries>
	                <policyEntry topic=">" producerFlowControl="true" memoryLimit="1mb">
	                  <pendingSubscriberPolicy>
	                    <vmCursor />
	                  </pendingSubscriberPolicy>
	                </policyEntry>
	                <policyEntry queue=">" producerFlowControl="true" memoryLimit="1mb">
	                </policyEntry>
	              </policyEntries>
	            </policyMap>
	        </destinationPolicy> 
	 
	     
	        <managementContext>
	            <managementContext createConnector="false"/>
	        </managementContext>
	
	        <persistenceAdapter>
	            <kahaDB directory="${activemq.base}/data/kahadb"/>
	           <!-- <jdbcPersistenceAdapter dataSource="#mysql-ds"/> -->
	        </persistenceAdapter>
	
	        
	        
	        
	        <plugins>
			      <!--  use JAAS to authenticate using the login.config file on the classpath to configure JAAS -->
			      <jaasAuthenticationPlugin configuration="activemq-domain" />
			      
			      <!-- <simpleAuthenticationPlugin>  
	            	<users>  
	                <authenticationUser username="$(activemq.username)" password="$(activemq.password)"  
	                    groups="users,admins,guests"/>
								</users>  
	       		 </simpleAuthenticationPlugin> -->
			
			      <!--  lets configure a destination based authorization mechanism -->
			      <authorizationPlugin>
			        <map>
			          <authorizationMap>
			            <authorizationEntries>
			              <authorizationEntry queue=">" read="admins" write="admins" admin="admins" />
			              <authorizationEntry queue="USERS.>" read="users" write="users" admin="users" />
			              <authorizationEntry queue="GUEST.>" read="guests" write="guests,users" admin="guests,users" />
			              
			              <authorizationEntry topic=">" read="admins" write="admins" admin="admins,king" />
			              <authorizationEntry topic="USERS.>" read="users" write="users" admin="users" />
			              <authorizationEntry topic="GUEST.>" read="guests" write="guests,users" admin="guests,users" />
			              
			              <authorizationEntry topic="ActiveMQ.Advisory.>" read="guests,users" write="guests,users" admin="guests,users"/>
			            </authorizationEntries>
			            
			            <!-- let's assign roles to temporary destinations. comment this entry if we don't want any roles assigned to temp destinations  -->
			            <tempDestinationAuthorizationEntry>  
			              <tempDestinationAuthorizationEntry read="tempDestinationAdmins" write="tempDestinationAdmins" admin="tempDestinationAdmins"/>
			           </tempDestinationAuthorizationEntry>               
			          </authorizationMap>
			        </map>
			      </authorizationPlugin>
			    </plugins> 
	
					<transportConnectors>
	            <transportConnector name="openwire" uri="tcp://0.0.0.0:61616"/>           
	            <!--<transportConnector name="myopen" uri="tcp://172.17.211.22:6062"/>-->
	            
	            <transportConnector name="tcp2" uri="tcp://172.17.4.181:6066"/>
	        </transportConnectors> 
	
	    </broker>
	
	    <import resource="jetty.xml"/>
	    
	</beans>


6.cd /usr/apache-activemq-5.6.0/bin
  ./activemq start 
  ./activemq console
  
  
  
  
------------------------------------日志接收端配置--------------------------------------  
  环境: /usr/logerWriter logerWriter.jar runLogerWriter.sh
1.runLogerWriter.sh 
 		#!/bin/sh
		java -jar logerWriter.jar
		
2.logerWriter.jar 下有配置文件
		#接收地址
		receiveURL = failover:(tcp://172.17.4.181:6066)
		#用户名
		user = user
		#密码
		password = 123
		#true为主题--订阅者模式，false为点对点模式
		topic = false
		#主题/队列名 如果需要创建不同的主题 格式：queue://USERS.subject,topic://GUEST.subject
		subject = USERS.test
		#消息过滤选择器
		selector = 
		#启动事务
		transacted = true
		
		#------------持久订阅配置(针对主题/订阅者模式)---------
		#是否开启持久订阅(设置true时，必须设置topic=true才有效)
		durableSub = false 
		#持久订阅者的标志ID,必须唯一
		clientID = client005
		#持久订阅者的名称
		subName = mySub005
		
		
		
		#配置异步日志数据库信息
		#是否启用
		use_db = true
		#数据库IP
		db_server=172.17.4.181
		#数据库名
		db=eimplog
		#数据库用户名
		db_user=eimp
		#数据库密码
		db_password=eimp
		#日志记录表
		tableName=logs
		
3./usr/logerWriter/runLogerWriter.sh  #启动




-----------------------------------linux下配置自动启动-------------------------------------
vi /etc/rc.local 打开文件
	添加：#是注释
	#Start logWriter  启动日志接受服务
	/usr/bin/logstart
	
	#Start taskQuartz  启动任务调度服务
	/usr/bin/taskstart
	
	#start mongodb  启动mongodb数据库服务
	#/usr/mongodb/bin/mongod --dbpath=/usr/mongodb/data/db --logpath=/usr/mongodb/logs/mongodb.log
	/usr/bin/mongodbstart
	
	#start activemq  启动activemq服务
	#nohup /usr/apache-activemq-5.6.0/bin/activemq start >/tmp/smlog
	/usr/bin/activemqstart
	
	
在相应的目录下分别有文件：	
	logstart：
			#!/bin/sh

			ps -ef | grep logerWriter | grep -v grep | awk '{print $2}' | grep -v grep
			
			if [ "$?" -eq "0" ]
			then
			echo found process.....
			kill -9 $(ps -ef | grep logerWriter | grep -v grep | awk '{print $2}' | grep -v grep)
			
			echo kill successful.
			fi
			
			cd /usr/logerWriter
			nohup java -jar logerWriter.jar >/dev/null 2>&1 &
			
			sleep 2s
			echo last process: $(ps -ef | grep logerWriter | grep -v grep | awk '{print $2}' | grep -v grep)
			ps -ef|head -1;ps -ef | grep logerWriter | grep -v grep | awk '{print $2}' | grep -v grep
			
	
	taskstart：			
			#!/bin/sh

			lsof -i :8001
			
			if [ "$?" -eq "0" ]
			then
			echo found process.....
			kill -9 $(lsof -i :8001 | awk '{print $2}' | grep -v PID)
			#lsof -i :8001 | awk '{print $2}' | grep -v PID |xargs kill -9
			
			echo kill successful.
			fi
			
			cd /usr/quartz
			nohup java -jar quartzTask.jar :8001 >/tmp/tasklog.log 2>&1 &
			
			sleep 2s
			echo last process: $(lsof -i :8001 | awk '{print $2}')
			lsof -i :8001	
			
			
	mongodbstart:
	        #!/bin/sh

			lsof -i :27017
			
			if [ "$?" -eq "0" ]
			then
			echo found process.....
			
			kill -9 $(lsof -i :27017 | awk '{print $2}' | grep -v PID)
			#lsof -i :27017 | awk '{print $2}' | grep -v PID |xargs kill -9
			
			rm -r -f /usr/mongodb/data/db/mongod.lock
			echo kill successful.
			fi
			
			cd /usr/mongodb/bin
			nohup /usr/mongodb/bin/mongod --dbpath=/usr/mongodb/data/db >/tmp/mongolog.log 2>&1 &
			
			sleep 2s
			echo last process: $(lsof -i :27017 | awk '{print $2}')
			lsof -i :27017
			
			
	activemqstart：		
			#!/bin/sh

			lsof -i :6066 | grep LISTEN
			
			if [ "$?" -eq "0" ]
			then
			echo found process.....
			kill -9 $(lsof -i :6066 | grep LISTEN | awk '{print $2}' | grep -v PID)
			
			echo kill successful.
			fi
			
			cd /usr/apache-activemq-5.6.0/bin
			nohup /usr/apache-activemq-5.6.0/bin/activemq start >/tmp/mqlog 2>&1 &
			
			sleep 2s
			echo last process: $(lsof -i :6066 | awk '{print $2}')
			lsof -i :6066	  
			
			

-----------------------------------

activemqstart   启动activemq
mongodbstart    启动mongodb
logstart        启动logWriter
taskstart       启动任务调度

判断activehq启动是否成功
lsof -i :6066 | grep LISTEN
判断logwriter是否启动
ps -ef | grep logerWriter | grep -v grep | awk '{print $2}' | grep -v grep
判断任务是否启动
lsof -i :8001
判断mongodb是否启动
lsof -i :27017


查看任务日志：tail -f /tmp/tasklog.log
停止任务：kill -9 $(lsof -i :8001 | awk '{print $2}' | grep -v PID)

查看mongodb日志：tail -f /tmp/mongolog.log	
查看logwriter日志：tail -f /tmp/logWriter.log		      				
	



建立快捷方式的命令
ln -s /usr/mongodb/bin/mongo /usr/bin/mongo

ln -s 源文件 目标连接文件 	

